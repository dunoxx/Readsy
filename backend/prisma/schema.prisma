// Configuração do Prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos
model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String?
  username          String?           @unique
  displayName       String
  profilePicture    String?
  backgroundPicture String?
  dateOfBirth       DateTime?
  country           String?
  language          Language          @default(pt)
  refreshToken      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  books             Book[]
  checkins          Checkin[]
  ownedGroups       Group[]
  groupMembers      GroupMember[]
  createdChallenges Challenge[]
  userChallenges    UserChallenge[]
  leaderboardEntries LeaderboardEntry[]

  @@map("users")
}

enum Language {
  pt
  en
  es
}

model Book {
  id          String     @id @default(uuid())
  title       String
  author      String
  coverImage  String?
  isbn        String?
  pages       Int?
  createdAt   DateTime   @default(now())
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  checkins    Checkin[]
  challenges  ChallengeBook[]

  @@map("books")
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime      @default(now())
  members     GroupMember[]

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Checkin {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      String
  pagesRead   Int
  minutesSpent Int
  currentPage Int?
  audioNoteUrl String?
  createdAt   DateTime @default(now())

  @@map("checkins")
}

model Challenge {
  id          String           @id @default(uuid())
  title       String
  description String
  type        ChallengeType
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime         @default(now())
  books       ChallengeBook[]
  participants UserChallenge[]

  @@map("challenges")
}

enum ChallengeType {
  PUBLIC
  PRIVATE
}

model ChallengeBook {
  id          String    @id @default(uuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String

  @@unique([challengeId, bookId])
  @@map("challenge_books")
}

model UserChallenge {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  String
  progress     Int       @default(0)
  completed    Boolean   @default(false)
  completedAt  DateTime?
  joinedAt     DateTime  @default(now())

  @@unique([userId, challengeId])
  @@map("user_challenges")
}

model LeaderboardEntry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  score     Int
  season    String
  createdAt DateTime @default(now())

  @@map("leaderboard_entries")
} 