// Configura√ß√£o do Prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos
model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String?
  username          String?           @unique
  displayName       String
  profilePicture    String?           @default("https://i.pravatar.cc/300")
  backgroundPicture String?
  dateOfBirth       DateTime?
  country           String?
  language          Language          @default(pt)
  refreshToken      String?
  role              Role              @default(MEMBER)
  bio               String?
  notifications     Json?             // Configura√ß√µes de notifica√ß√µes
  
  // Campos de gamifica√ß√£o
  level             Int               @default(1)
  totalXp           Int               @default(0)
  seasonXp          Int               @default(0)
  coins             Int               @default(0)
  streak            Int               @default(0)  // Sequ√™ncia de dias com check-in
  lastCheckInDate   DateTime?       // Data do √∫ltimo check-in
  lastLevelUpAt     DateTime?       // Data da √∫ltima subida de n√≠vel
  suspended         Boolean           @default(false)
  badges            UserBadge[]
  achievements      UserAchievement[]
  seasonRewards     SeasonReward[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  books             Book[]
  checkins          Checkin[]
  ownedGroups       Group[]
  groupMembers      GroupMember[]
  createdChallenges Challenge[]
  userChallenges    UserChallenge[]
  leaderboardEntries LeaderboardEntry[]
  completedGlobalChallenges UserGlobalChallenge[]
  completedGroupChallenges  UserGroupChallenge[]
  dailyQuests         UserDailyQuest[]
  weeklyQuests        UserWeeklyQuest[]
  posts               Post[]           // Rela√ß√£o com posts
  reactions           Reaction[]       // Rela√ß√£o com rea√ß√µes
  userQuests          UserQuest[]      // Rela√ß√£o com o novo sistema de quests
  groupJoinRequests   GroupJoinRequest[] // Rela√ß√£o com solicita√ß√µes de ades√£o a grupos

  @@map("users")
}

enum Language {
  pt
  en
  es
}

enum BookStatus {
  READING
  FINISHED
  ABANDONED
  PLANNING
}

model Book {
  id            String     @id @default(uuid())
  title         String
  author        String
  coverImage    String?
  isbn          String?
  pages         Int?
  publishedDate String?    // Ano de publica√ß√£o, ex: "1999"
  description   String?    // Resumo do livro
  publisher     String?    // Nome da editora
  language      String?    // C√≥digo do idioma, ex: "pt", "en", "es"
  status        BookStatus @default(READING)
  createdAt     DateTime   @default(now())
  createdBy     User       @relation(fields: [createdById], references: [id])
  createdById   String
  checkins      Checkin[]
  challenges    ChallengeBook[]

  @@index([isbn]) // Indexar ISBN para buscas mais r√°pidas
  @@map("books")
}

model Group {
  id                String            @id @default(uuid())
  name              String
  description       String?
  imageUrl          String?          // URL da imagem do grupo
  isPublic          Boolean          @default(true)
  requiresApproval  Boolean          @default(false)
  owner             User              @relation(fields: [ownerId], references: [id])
  ownerId           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  members           GroupMember[]
  groupChallenges   GroupChallenge[]
  memberRequests    GroupJoinRequest[] // Novas solicita√ß√µes de membros
  // Campos de gamifica√ß√£o para grupos
  level             Int               @default(1)
  totalXp           Int               @default(0)
  seasonXp          Int               @default(0)

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  lastActivityAt DateTime @default(now()) // √öltima atividade do membro
  
  // Campos de gamifica√ß√£o para cada membro no grupo
  contributionXp    Int      @default(0)
  seasonContribution Int     @default(0)
  points           Int      @default(0)   // Pontos no grupo (independente do XP da plataforma)
  completedChallenges Int   @default(0)   // N√∫mero de desafios completados neste grupo

  @@unique([groupId, userId])
  @@map("group_members")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  USER
}

model Checkin {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      String
  pagesRead   Int
  minutesSpent Int
  currentPage Int?
  audioNoteUrl String?
  // Campos para gamifica√ß√£o
  xpEarned    Int      @default(0)
  coinsEarned Int      @default(0)
  createdAt   DateTime @default(now())

  @@map("checkins")
}

model Challenge {
  id          String           @id @default(uuid())
  title       String
  description String
  type        ChallengeType
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdById String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime         @default(now())
  // Campos para gamifica√ß√£o
  xpReward    Int              @default(0)
  coinsReward Int              @default(0)
  books       ChallengeBook[]
  participants UserChallenge[]

  @@map("challenges")
}

enum ChallengeType {
  PUBLIC
  PRIVATE
}

model ChallengeBook {
  id          String    @id @default(uuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String

  @@unique([challengeId, bookId])
  @@map("challenge_books")
}

model UserChallenge {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  String
  progress     Int       @default(0)
  completed    Boolean   @default(false)
  completedAt  DateTime?
  joinedAt     DateTime  @default(now())
  // Campos para gamifica√ß√£o
  xpEarned     Int       @default(0)
  coinsEarned  Int       @default(0)

  @@unique([userId, challengeId])
  @@map("user_challenges")
}

model LeaderboardEntry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  score     Int
  season    String
  // Campos para crit√©rios de desempate
  checkIns  Int      @default(0)
  challenges Int     @default(0)
  streak    Int      @default(0)
  createdAt DateTime @default(now())

  @@map("leaderboard_entries")
}

// Modelos para o sistema de gamifica√ß√£o

model ChallengeTemplate {
  id               String              @id @default(uuid())
  name             String
  description      String?
  icon             String              @default("üéØ")
  baseXpReward     Int
  baseCoinsReward  Int                 @default(0)
  type             TemplateType
  requirements     Json                // Armazena condi√ß√µes para completar o desafio
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  userChallenges   UserGlobalChallenge[]
  groupChallenges  GroupChallenge[]

  @@map("challenge_templates")
}

enum TemplateType {
  DAILY
  WEEKLY
  MONTHLY
  SPECIAL
}

model UserGlobalChallenge {
  id                 String            @id @default(uuid())
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  challengeTemplate  ChallengeTemplate @relation(fields: [challengeTemplateId], references: [id])
  challengeTemplateId String
  completedAt        DateTime          @default(now())
  xpEarned           Int
  coinsEarned        Int
  season             String

  @@unique([userId, challengeTemplateId, season])
  @@map("user_global_challenges")
}

model GroupChallenge {
  id                 String             @id @default(uuid())
  group              Group              @relation(fields: [groupId], references: [id])
  groupId            String
  title              String             // T√≠tulo do desafio
  description        String?            // Descri√ß√£o do desafio
  type               QuestType          // Tipo de desafio usando QuestType existente
  target             Int                // Meta (ex: n√∫mero de p√°ginas, dias de check-in)
  bookId             String?            // ID do livro (opcional)
  pointsReward       Int                // Pontos que o usu√°rio ganha ao completar
  frequency          ChallengeFrequency // Frequ√™ncia do desafio
  createdAt          DateTime           @default(now())
  endDate            DateTime
  createdBy          String             // ID do usu√°rio que criou o desafio
  challengeTemplate  ChallengeTemplate? @relation(fields: [challengeTemplateId], references: [id])
  challengeTemplateId String?
  userCompletions    UserGroupChallenge[]

  @@map("group_challenges")
}

model UserGroupChallenge {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  groupChallenge   GroupChallenge @relation(fields: [groupChallengeId], references: [id])
  groupChallengeId String
  completedAt      DateTime       @default(now())
  xpEarned         Int

  @@unique([userId, groupChallengeId])
  @@map("user_group_challenges")
}

model Season {
  id            String          @id @default(uuid())
  name          String          // Ex: "2024-Spring"
  displayName   String          // Ex: "Primavera 2024"
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean         @default(false)
  completed     Boolean         @default(false)
  rewardsIssued Boolean         @default(false)
  rewards       SeasonReward[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("seasons")
}

model LevelDefinition {
  id        String   @id @default(uuid())
  level     Int      @unique
  xpRequired Int
  rewards   Json?    // Recompensas ao subir para este n√≠vel (moedas, badges, etc)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("level_definitions")
}

model UserBadge {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   String
  earnedAt  DateTime @default(now())
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  icon        String
  category    BadgeCategory
  rarity      BadgeRarity
  createdAt   DateTime    @default(now())
  users       UserBadge[]
  
  @@map("badges")
}

enum BadgeCategory {
  READING
  CHECKIN
  CHALLENGE
  GROUP
  SPECIAL
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model UserAchievement {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  progress      Int         @default(0)
  completed     Boolean     @default(false)
  completedAt   DateTime?
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Achievement {
  id          String            @id @default(uuid())
  name        String
  description String
  icon        String
  goal        Int               // Valor a ser atingido
  xpReward    Int
  coinsReward Int
  badgeReward String?           // ID do badge que ser√° concedido
  createdAt   DateTime          @default(now())
  users       UserAchievement[]
  
  @@map("achievements")
}

model SeasonReward {
  id            String   @id @default(uuid())
  season        Season   @relation(fields: [seasonId], references: [id])
  seasonId      String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  rank          Int
  coinsRewarded Int
  badgesRewarded Json?    // Lista de IDs de badges concedidos
  rewardedAt    DateTime @default(now())
  
  @@unique([seasonId, userId])
  @@map("season_rewards")
}

enum QuestType {
  READ_PAGES
  COMPLETE_BOOK
  DAILY_CHECKIN
  JOIN_GROUP
  INVITE_FRIEND
  REVIEW_BOOK
  UPDATE_PROFILE
}

model DailyQuest {
  id             String               @id @default(uuid())
  title          String
  description    String?
  emoji          String               @default("üéØ")
  questType      QuestType
  parameters     Json?
  baseXpReward   Int
  baseCoinReward Int                  @default(0)
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  assignments    UserDailyQuest[]

  @@map("daily_quests")
}

model WeeklyQuest {
  id             String                @id @default(uuid())
  title          String
  description    String?
  emoji          String                @default("üéØ")
  questType      QuestType
  parameters     Json?
  baseXpReward   Int
  baseCoinReward Int                   @default(0)
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  assignments    UserWeeklyQuest[]

  @@map("weekly_quests")
}

model UserDailyQuest {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  quest         DailyQuest @relation(fields: [questId], references: [id])
  questId       String
  assignedAt    DateTime   @default(now())
  expiresAt     DateTime
  completed     Boolean    @default(false)
  completedAt   DateTime?
  xpEarned      Int?
  coinsEarned   Int?

  @@unique([userId, questId, assignedAt])
  @@map("user_daily_quests")
}

model UserWeeklyQuest {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  quest         WeeklyQuest @relation(fields: [questId], references: [id])
  questId       String
  assignedAt    DateTime    @default(now())
  expiresAt     DateTime
  completed     Boolean     @default(false)
  completedAt   DateTime?
  xpEarned      Int?
  coinsEarned   Int?

  @@unique([userId, questId, assignedAt])
  @@map("user_weekly_quests")
}

// Novos modelos para o sistema de Timeline e Postagens
model Post {
  id             String     @id @default(uuid())
  content        String
  isSpoiler      Boolean    @default(false)
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  reactions      Reaction[]

  @@map("posts")
}

model Reaction {
  id             String       @id @default(uuid())
  type           ReactionType
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  post           Post         @relation(fields: [postId], references: [id])
  postId         String
  createdAt      DateTime     @default(now())

  @@unique([userId, postId])
  @@map("reactions")
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
}

// Modelos para o sistema unificado de quests
model Quest {
  id            String      @id @default(uuid())
  title         String
  description   String
  type          QuestType
  valueTarget   Int
  xpReward      Int
  coinReward    Int
  emoji         String?
  isActive      Boolean     @default(true)
  isDaily       Boolean     @default(false)
  isWeekly      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userQuests    UserQuest[]
}

model UserQuest {
  id          String    @id @default(uuid())
  userId      String
  questId     String
  currentValue Int       @default(0)
  completed   Boolean   @default(false)
  acceptedAt  DateTime  @default(now())
  completedAt DateTime?
  expiresAt   DateTime?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest       Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@index([userId])
  @@index([questId])
  @@index([completed])
  @@index([expiresAt])
}

// Novo modelo para solicita√ß√µes de ades√£o ao grupo
model GroupJoinRequest {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    JoinRequestStatus @default(PENDING)
  requestedAt DateTime @default(now())
  resolvedAt DateTime?

  @@unique([groupId, userId])
  @@map("group_join_requests")
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Modelos para o M√≥dulo de Administra√ß√£o
model AdminLog {
  id          String   @id @default(uuid())
  adminId     String
  action      String
  entityType  String
  entityId    String?
  details     Json?
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  @@index([adminId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("admin_logs")
}

model AdminSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@map("admin_settings")
}

// Nova enum para frequ√™ncia de desafios
enum ChallengeFrequency {
  DAILY
  WEEKLY
} 