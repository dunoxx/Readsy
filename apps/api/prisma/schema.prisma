// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL" ) // Ensure this environment variable is set
}

// ENUMS

enum Language {
  PT_BR
  EN_US
  ES
}

enum UserBookStatus {
  READING
  READ
  WISHLIST
  SHELVED // Default status for books added but not categorized
}

enum QuestType {
  READ_PAGES
  READ_MINUTES
  FINISH_BOOK
  CHECK_IN
  INTERACT_GROUP // Example: Post or comment in a group
  ADD_BOOK
  COMPLETE_CHALLENGE
  VOICE_NOTE
  UPDATE_BOOK_STATUS
  // Add more types as needed based on documentation examples
}

enum ChallengeFrequency {
  DAILY
  WEEKLY
  EVENT // For special, non-recurring challenges
}

enum ChallengeStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum UserChallengeStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED // If applicable (e.g., time-limited challenges)
}

enum GroupType {
  PUBLIC_OPEN      // Anyone can join instantly
  PUBLIC_APPROVAL  // Anyone can request, admin must approve
  PRIVATE          // Invite only
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum ShopItemType {
  AVATAR
  FRAME
  BACKGROUND
  // POWER_UP // Mentioned but needs definition
}

enum PostType {
  THOUGHT        // Free text post
  CHECK_IN       // Link to a ReadingCheckIn
  BOOK_STATUS    // E.g., Started reading X, Finished Y
  ACHIEVEMENT    // E.g., Reached Level 5, Completed Challenge Z
}

enum PostVisibility {
  PUBLIC
  PRIVATE        // Only visible to the user
  FOLLOWERS      // Visible to user and their followers
}

enum NotificationType {
  NEW_FOLLOWER
  GROUP_INVITE
  GROUP_JOIN_REQUEST // For admins of PUBLIC_APPROVAL groups
  GROUP_POST       // New post in a group
  CHALLENGE_START  // New global or group challenge started
  CHALLENGE_COMPLETE
  LEVEL_UP
  SEASON_REWARD
  // Add more types as needed
}

enum AdminRole {
  SUPER_ADMIN
  CONTENT_MODERATOR
  SUPPORT
}

// MODELS

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  passwordHash          String?   @map("password_hash") // Renamed from 'password'
  displayName           String    @map("display_name") // Renamed from 'name'
  profilePictureUrl     String?   @map("profile_picture_url")
  bio                   String?   @db.Text
  language              Language  @default(PT_BR)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  emailVerified         Boolean   @default(false) @map("email_verified")
  lastLogin             DateTime? @map("last_login")
  adminRole             AdminRole? // For admin panel access

  // OAuth specific fields (optional, based on implementation)
  googleId              String?   @unique @map("google_id")
  // telegramId         String?   @unique @map("telegram_id") // If implemented

  // Relations
  stats                 UserStats? // One-to-one stats
  bookshelves           Bookshelf[]
  userBooks             UserBook[] // Changed from 'books'
  checkIns              ReadingCheckIn[]
  questProgress         UserQuestProgress[]
  groupMemberships      GroupMember[]
  userGroupChallenges   UserGroupChallenge[]
  inventory             UserInventory[]
  profileCustomization  UserProfileCustomization? // One-to-one customization
  posts                 Post[]
  notifications         Notification[]
  // Following/Followers
  following             Follow[]  @relation("UserFollowing")
  followers             Follow[]  @relation("UserFollowers")
  // Admin logs
  adminActions          AdminActionLog[]
  // Stripe/Subscription (if implemented)
  stripeCustomer        StripeCustomer? 
  subscriptions         Subscription[]

  @@map("users")
}

model UserStats {
  id          String    @id @default(uuid())
  userId      String    @unique @map("user_id")
  level       Int       @default(1)
  seasonXP    Int       @default(0) @map("season_xp")
  totalXP     Int       @default(0) @map("total_xp")
  coins       Int       @default(0)
  lastResetAt DateTime? @map("last_reset_at") // Timestamp of the last season reset affecting this user
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relation
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model Book {
  id                String    @id @default(uuid())
  title             String
  author            String?
  coverUrl          String?   @map("cover_url")
  isbn              String?   @unique
  pageCount         Int?      @map("page_count")
  genre             String?   // Consider a separate Genre model if complex categorization is needed
  description       String?   @db.Text
  amazonAffiliateLink String? @map("amazon_affiliate_link")
  // Fields to track source API if needed (e.g., googleBooksId, openLibraryId)
  googleBooksId     String?   @unique @map("google_books_id")
  openLibraryId     String?   @unique @map("open_library_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  userBooks         UserBook[]

  @@map("books")
}

model Bookshelf {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  color     String?  // Hex color code
  emoji     String?
  isWishlist Boolean @default(false) @map("is_wishlist") // Special flag for the default wishlist
  isDefault Boolean @default(false) @map("is_default") // Flag for default 'Reading', 'Read' shelves if needed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userBooks UserBook[]

  @@map("bookshelves")
}

model UserBook {
  id            String         @id @default(uuid())
  userId        String         @map("user_id")
  bookId        String         @map("book_id")
  bookshelfId   String?        @map("bookshelf_id") // Can be null if not on a specific custom shelf initially
  status        UserBookStatus @default(SHELVED)
  addedAt       DateTime       @default(now()) @map("added_at")
  startedAt     DateTime?      @map("started_at")
  finishedAt    DateTime?      @map("finished_at")
  personalRating Int?          @map("personal_rating") // e.g., 1-5 stars
  isActive      Boolean        @default(false) @map("is_active") // For check-in eligibility

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  book          Book           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookshelf     Bookshelf?     @relation(fields: [bookshelfId], references: [id], onDelete: SetNull)
  checkIns      ReadingCheckIn[]

  @@unique([userId, bookId]) // User can only have one entry per book
  @@map("user_books")
}

model ReadingCheckIn {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  userBookId       String    @map("user_book_id")
  pagesRead        Int       @map("pages_read")
  timeSpentMinutes Int       @map("time_spent_minutes")
  voiceNoteUrl     String?   @map("voice_note_url")
  currentPage      Int?      @map("current_page") // Page number user is currently on after this check-in
  checkInTimestamp DateTime  @default(now()) @map("check_in_timestamp")

  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userBook         UserBook  @relation(fields: [userBookId], references: [id], onDelete: Cascade)

  @@map("reading_check_ins")
}

model ChallengeTemplate {
  id              String    @id @default(uuid())
  name            String
  description     String?   @db.Text
  icon            String?   // Emoji
  baseXpReward    Int       @default(0) @map("base_xp_reward")
  baseCoinsReward Int       @default(0) @map("base_coins_reward")
  questType       QuestType @map("quest_type")
  questParameters Json?     @map("quest_parameters") // e.g., {"pages": 100, "genre": "Fiction"}
  frequency       ChallengeFrequency? // DAILY, WEEKLY, EVENT - Nullable if it's a one-off admin challenge
  status          ChallengeStatus @default(ACTIVE)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  startDate       DateTime? @map("start_date") // Optional start/end for global challenges
  endDate         DateTime? @map("end_date")

  // Relations
  userQuestProgress UserQuestProgress[]
  groupChallenges   GroupChallenge[]

  @@map("challenge_templates")
}

// Tracks progress on GLOBAL challenges/quests directly linked to templates
model UserQuestProgress {
  id                 String              @id @default(uuid())
  userId             String              @map("user_id")
  challengeTemplateId String             @map("challenge_template_id")
  progress           Json?               // Flexible progress tracking, e.g., {"pagesRead": 50, "target": 100}
  status             UserChallengeStatus @default(NOT_STARTED)
  startedAt          DateTime?           @map("started_at")
  completedAt        DateTime?           @map("completed_at")
  lastProgressAt     DateTime            @updatedAt @map("last_progress_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeTemplate  ChallengeTemplate   @relation(fields: [challengeTemplateId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeTemplateId]) // Assuming user can only work on one instance of a global template at a time
  @@map("user_quest_progress")
}

model Group {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  iconUrl     String?   @map("icon_url")
  type        GroupType @default(PUBLIC_OPEN)
  rules       String?   @db.Text
  ownerId     String    @map("owner_id") // Reference to the User who owns the group
  memberLimit Int?      @map("member_limit")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Restrict) // Prevent owner deletion if group exists?
  members     GroupMember[]
  challenges  GroupChallenge[]
  // Consider posts specific to groups if needed
  // posts    GroupPost[] 

  @@map("groups")
}

model GroupMember {
  id        String          @id @default(uuid())
  userId    String          @map("user_id")
  groupId   String          @map("group_id")
  role      GroupMemberRole @default(MEMBER)
  joinedAt  DateTime        @default(now()) @map("joined_at")

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupChallenge {
  id                  String    @id @default(uuid())
  groupId             String    @map("group_id")
  challengeTemplateId String    @map("challenge_template_id")
  groupStartDate      DateTime  @default(now()) @map("group_start_date")
  groupEndDate        DateTime? @map("group_end_date")
  status              ChallengeStatus @default(ACTIVE) // Status within the group
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  group               Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  challengeTemplate   ChallengeTemplate     @relation(fields: [challengeTemplateId], references: [id], onDelete: Cascade)
  userProgress        UserGroupChallenge[]

  @@map("group_challenges")
}

// Tracks progress on GROUP challenges
model UserGroupChallenge {
  id               String              @id @default(uuid())
  userId           String              @map("user_id")
  groupChallengeId String              @map("group_challenge_id")
  progress         Json?               // Flexible progress tracking
  status           UserChallengeStatus @default(NOT_STARTED)
  groupScore       Int                 @default(0) @map("group_score") // Points earned for the group leaderboard
  startedAt        DateTime?           @map("started_at")
  completedAt      DateTime?           @map("completed_at")
  lastProgressAt   DateTime            @updatedAt @map("last_progress_at")

  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupChallenge   GroupChallenge      @relation(fields: [groupChallengeId], references: [id], onDelete: Cascade)

  @@unique([userId, groupChallengeId])
  @@map("user_group_challenges")
}

model ShopItem {
  id          String       @id @default(uuid())
  name        String
  description String?      @db.Text
  type        ShopItemType
  priceCoins  Int          @map("price_coins")
  imageUrl    String?      @map("image_url")
  isActive    Boolean      @default(true) @map("is_active") // Can be deactivated by admin
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  inventoryItems UserInventory[]

  @@map("shop_items")
}

model UserInventory {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  shopItemId String   @map("shop_item_id")
  acquiredAt DateTime @default(now()) @map("acquired_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopItem   ShopItem @relation(fields: [shopItemId], references: [id], onDelete: Cascade)

  @@unique([userId, shopItemId]) // User owns only one instance of each item
  @@map("user_inventory")
}

model UserProfileCustomization {
  id                   String   @id @default(uuid())
  userId               String   @unique @map("user_id")
  equippedAvatarId     String?  @map("equipped_avatar_id") // FK to UserInventory where ShopItemType is AVATAR
  equippedFrameId      String?  @map("equipped_frame_id")  // FK to UserInventory where ShopItemType is FRAME
  equippedBackgroundId String?  @map("equipped_background_id") // FK to UserInventory where ShopItemType is BACKGROUND
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // We cannot directly link to UserInventory here with Prisma constraints based on ShopItemType.
  // Logic to validate equipped items must be in the application layer.
  // equippedAvatar     UserInventory? @relation(fields: [equippedAvatarId], references: [id]) // This doesn't enforce type

  @@map("user_profile_customizations")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id") // User who is following
  followingId String   @map("following_id") // User who is being followed
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id           String         @id @default(uuid())
  userId       String         @map("user_id")
  type         PostType
  content      String         @db.Text // Can store text or reference IDs (e.g., checkInId, bookId)
  visibility   PostVisibility @default(PUBLIC)
  hasSpoiler   Boolean        @default(false) @map("has_spoiler")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  // Add relations if content links to other models, e.g.:
  // checkInId String? @map("check_in_id")
  // checkIn ReadingCheckIn? @relation(fields: [checkInId], references: [id])

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Add likes/comments if needed
  // likes     PostLike[]
  // comments  PostComment[]

  @@map("posts")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String           @map("user_id") // The user receiving the notification
  type       NotificationType
  content    Json?            // Flexible content, e.g., { "followerName": "Alice", "groupId": "xyz" }
  readStatus Boolean          @default(false) @map("read_status")
  link       String?          // Optional link to navigate to (e.g., profile, group)
  createdAt  DateTime         @default(now()) @map("created_at")

  // Relations
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AdminActionLog {
  id                String   @id @default(uuid())
  adminUserId       String   @map("admin_user_id")
  actionDescription String   @map("action_description")
  targetEntity      String?  @map("target_entity") // e.g., "User", "ChallengeTemplate"
  targetId          String?  @map("target_id")
  details           Json?    // Additional details about the action
  timestamp         DateTime @default(now())

  // Relations
  adminUser         User     @relation(fields: [adminUserId], references: [id]) // Assuming admin role is on User model

  @@map("admin_action_logs")
}

// Optional models for Stripe integration, if implemented
model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique @map("user_id")
  stripeCustomerId String @unique @map("stripe_customer_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stripe_customers")
}

model Subscription {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  stripeSubscriptionId String   @unique @map("stripe_subscription_id")
  planId               String   @map("plan_id") // ID of the plan in your system or Stripe
  status               String   // e.g., active, canceled, past_due (matches Stripe statuses)
  currentPeriodEnd     DateTime @map("current_period_end")
  cancelAtPeriodEnd    Boolean  @default(false) @map("cancel_at_period_end")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Optional model for i18n management via Admin Panel
model Translation {
  id           String   @id @default(uuid())
  key          String   // e.g., "profile.welcomeMessage"
  languageCode String   @map("language_code") // e.g., "en_US", "pt_BR"
  value        String   @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@map("translations")
} 